
from modcore.log import logger

from modext.webserv.windup import WindUp, Router

router = Router( )

@router.get("/simple")
def my_simple_fiber( req, args ):
    
    body = req.request.xform
    
    def fibered():
        data = """
                <h1>html page generated by fiber processing</h1>
                <div> query parameter = %s </div>
                """ % ( repr( args ), )
        logger.info(data)
        req.send_response( response=data )
        # yield ist required to make it a generator func
        yield
        
    req.send_fiber( fibered() )

@router.get("/complex")
def my_complex_fiber( req, args ):
    
    body = req.request.xform
    
    def fibered():
        
        # several yield statements inbetween...
        # always cause others to process
        
        req.send_head( )
        
        yield
        
        data = """
                <h1>html page generated by fiber processing</h1>
                <h2>submitting single lines</h2>
                <div> query parameter = %s </div>
                """ % ( repr( args ), )
        logger.info(data)
        logger.info("splitting lines now")

        lines = data.splitlines()
        
        yield
        
        for line in lines:
            # this is of course slow since data packages sent are small
            # http overhead for sending counts here 
            req.send_data(line)            
            yield 
        
    req.send_fiber( fibered() )


def serve():
    serv = WindUp()

    serv.start(generators=[
            router,
        ])

    try:
        while True:
            serv.loop()
    except KeyboardInterrupt:
        logger.info("cntrl+c")
    finally:
        serv.stop()


